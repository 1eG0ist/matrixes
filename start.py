# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow
from functions import MatrixFunctions as fn


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setStyleSheet('Ui_MainWindow {background-image: url(images/background2.jpeg)}')
        self.setFixedSize(300, 500)
        self.setWindowTitle("X-I-Я-T-A-M|~|M-A-T-R-I-X")
        self.setWindowIcon(QtGui.QIcon('images/icon.png'))
        self.setStyleSheet('Ui_MainWindow {background-image: images/background2.jpeg}')
        self.error_text = "Скорее всего вы неверно внесли данные Проверьте окна на наличие лишних " \
                          "пробелов\переводов строки, или значений строк\столбцов за пределами размерности матрицы"
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setBold(False)
        font.setItalic(True)
        font.setUnderline(False)
        font.setWeight(30)
        self.setFont(font)
        self.setMouseTracking(False)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(50, 10, 200, 111))
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.IBeamCursor))
        self.textEdit.setStatusTip("")
        self.textEdit.setWhatsThis("")
        self.textEdit.setAccessibleName("")
        self.textEdit.setPlaceholderText("0 0 0\n0 0 0\n0 0 0")
        self.textEdit.setObjectName("textEdit")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(85, 180, 130, 20))
        self.lineEdit.setWhatsThis("")
        self.lineEdit.setMaxLength(10)
        self.lineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(100, 210, 100, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.click_button_1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(80, 240, 140, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.click_button_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(100, 270, 100, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.click_button_3)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(50, 130, 200, 50))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiLight")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.textBrowser.setFont(font)
        self.textBrowser.setWhatsThis("")
        self.textBrowser.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.textBrowser.setAutoFillBackground(False)
        self.textBrowser.setObjectName("textBrowser")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(50, 310, 200, 111))
        self.textEdit_2.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.IBeamCursor))
        self.textEdit_2.setWhatsThis("dfgdfg")
        self.textEdit_2.setPlaceholderText("")
        self.textEdit_2.setObjectName("textEdit_2")
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 300, 27))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "~|M-A-T-R-I-X|~"))
        MainWindow.setStyleSheet('Ui_MainWindow {background-image: url(images/background.jpeg)}')
        self.textEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"justify\"><br/></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Показать минор"))
        self.pushButton_2.setText(_translate("MainWindow", "Показать определитель"))
        self.pushButton_3.setText(_translate("MainWindow", "Найти обратную"))
        self.textBrowser.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\">Введите индексы, если вам нужен минор матрицы</p></body></html>"))
        self.textBrowser.setPlaceholderText(_translate("MainWindow", "если вам нужен минор матрицы, введите индексы"))
        self.textEdit_2.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"justify\"><br/></p></body></html>"))

    def click_button_1(self):
        try:
            matrix = fn.convert_str_to_np_arr(self.textEdit.toPlainText())
            indexes = tuple(map(int, self.lineEdit.text().split()))
            result = fn.find_minor(matrix, indexes[0], indexes[1])
            matrix = result[0]
            det = result[1]
            self.textEdit_2.setText(f"{fn.convert_np_arr_to_str(matrix)}\n\nалгебраическое дополнение: {det}")
        except Exception:
            self.textEdit_2.setText(self.error_text)

    def click_button_2(self):
        try:
            mat = fn.convert_str_to_np_arr(self.textEdit.toPlainText())
            self.textEdit_2.setText(str(fn.find_matrix_det(mat)))
        except Exception:
            self.textEdit_2.setText(self.error_text)

    def click_button_3(self):
        try:
            mat = fn.convert_str_to_np_arr(self.textEdit.toPlainText())
            matrix = fn.find_reverse_matrix(mat)
            if type(matrix) == str:
                self.textEdit_2.setText(matrix)
            else:
                self.textEdit_2.setText(fn.convert_np_arr_to_str(matrix))
        except Exception:
            self.textEdit_2.setText(self.error_text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec())
